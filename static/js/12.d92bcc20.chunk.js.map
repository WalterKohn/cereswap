{"version":3,"sources":["components/CollapsibleCard/index.tsx","views/Nft/market/Collection/Traits/styles.tsx","views/Nft/market/Collection/Traits/PancakeBunniesTraits.tsx","views/Nft/market/Collection/Traits/utils.tsx","views/Nft/market/Collection/Traits/CollectionTraits.tsx","views/Nft/market/Collection/Traits/index.tsx","../node_modules/lodash/_hasUnicode.js","../node_modules/lodash/upperFirst.js","views/Nft/market/hooks/useGetCollectionDistribution.tsx","../node_modules/lodash/_createCaseFirst.js","../node_modules/lodash/_castSlice.js","../node_modules/lodash/_baseSlice.js","../node_modules/lodash/_stringToArray.js","../node_modules/lodash/_asciiToArray.js","../node_modules/lodash/_unicodeToArray.js","../node_modules/lodash/sum.js","../node_modules/lodash/capitalize.js","../node_modules/lodash/_baseSum.js"],"names":["CollapsibleCard","initialOpenState","title","children","props","useState","isOpen","setIsOpen","p","alignItems","justifyContent","as","variant","scale","onClick","width","StyledSortButton","styled","button","theme","colors","secondary","TableWrapper","div","NftImage","Image","ClickableRow","tr","NftName","thumbnailSrc","name","src","height","mr","LowestPriceCell","bunnyId","useGetLowestPriceFromBunnyId","isFetching","lowestPrice","amount","PancakeBunniesTraits","collectionAddress","tokenApiResponse","setTokenApiResponse","raritySort","setRaritySort","t","useTranslation","push","useHistory","useEffect","a","getNftsFromCollectionApi","apiResponse","fetchTokens","totalMinted","sum","Object","values","attributesDistribution","sortedBunnieKeys","useMemo","keys","data","sort","bunnyIdA","bunnyIdB","bunnyCountA","bunnyCountB","sortBunniesByRarityBuilder","textAlign","type","currentValue","color","map","nft","count","percentage","nftsBaseUrl","image","thumbnail","formatNumber","times","bunnyCnt","CollectionTraits","useGetCollectionDistribution","traitType","index","total","traitValues","reduce","accum","traitValue","rarity","value","sortType","capitalize","mb","prevRaritySort","orderBy","Traits","useParams","dispatch","useAppDispatch","collection","useGetCollection","fetchCollection","Header","Container","py","pancakeBunniesAddress","reHasUnicode","RegExp","module","exports","string","test","upperFirst","require","createCaseFirst","useGetCollectionDistributionPB","state","setState","prevState","getCollectionDistributionApi","castSlice","hasUnicode","stringToArray","toString","methodName","strSymbols","undefined","chr","charAt","trailing","join","slice","baseSlice","array","start","end","length","result","Array","asciiToArray","unicodeToArray","split","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsOptVar","rsSeq","rsSymbol","reUnicode","match","baseSum","identity","toLowerCase","iteratee","current"],"mappings":"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","file":"static/js/12.d92bcc20.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n  CardProps,\n  CardHeader,\n  Card,\n  Flex,\n  Heading,\n  IconButton,\n  ChevronUpIcon,\n  ChevronDownIcon,\n} from '@pancakeswap/uikit'\n\ninterface CollapsibleCardProps extends CardProps {\n  initialOpenState?: boolean\n  title: string\n}\n\nconst CollapsibleCard: React.FC<CollapsibleCardProps> = ({ initialOpenState = true, title, children, ...props }) => {\n  const [isOpen, setIsOpen] = useState(initialOpenState)\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  return (\n    <Card {...props}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Heading as=\"h3\">{title}</Heading>\n          <IconButton variant=\"text\" scale=\"sm\" onClick={toggleOpen}>\n            {isOpen ? <ChevronUpIcon width=\"24px\" /> : <ChevronDownIcon width=\"24px\" />}\n          </IconButton>\n        </Flex>\n      </CardHeader>\n      {isOpen && children}\n    </Card>\n  )\n}\n\nexport default CollapsibleCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Image, Text } from '@pancakeswap/uikit'\n\nexport const StyledSortButton = styled.button`\n  border: none;\n  cursor: pointer;\n  background: none;\n  color: ${({ theme }) => theme.colors.secondary};\n  font-weight: bold;\n`\n\nexport const TableWrapper = styled.div`\n  -webkit-overflow-scrolling: touch;\n  min-width: 320px;\n  overflow-x: auto;\n`\n\nexport const NftImage = styled(Image)`\n  flex: none;\n  & > img {\n    border-radius: 8px;\n  }\n`\n\nexport const ClickableRow = styled.tr`\n  cursor: pointer;\n\n  &:hover {\n    td {\n      opacity: 0.65;\n    }\n  }\n`\n\nexport const NftName: React.FC<{ thumbnailSrc: string; name: string }> = ({ thumbnailSrc, name }) => (\n  <Flex alignItems=\"center\">\n    <NftImage src={thumbnailSrc} width={48} height={48} mr=\"8px\" />\n    <Text>{name}</Text>\n  </Flex>\n)\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { Skeleton, Table, Td, Th, Flex, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useHistory } from 'react-router'\nimport times from 'lodash/times'\nimport sum from 'lodash/sum'\nimport { formatNumber } from 'utils/formatBalance'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { ApiResponseCollectionTokens } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport { useGetLowestPriceFromBunnyId } from '../../hooks/useGetLowestPrice'\nimport { BNBAmountLabel } from '../../components/CollectibleCard/styles'\nimport { sortBunniesByRarityBuilder } from './utils'\nimport { nftsBaseUrl } from '../../constants'\nimport { SortType } from '../../types'\nimport { ClickableRow, NftName, StyledSortButton, TableWrapper } from './styles'\n\ninterface PancakeBunniesTraitsProps {\n  collectionAddress: string\n}\n\nconst LowestPriceCell: React.FC<{ bunnyId: string }> = ({ bunnyId }) => {\n  const { isFetching, lowestPrice } = useGetLowestPriceFromBunnyId(bunnyId)\n\n  if (isFetching) {\n    return (\n      <Flex justifyContent=\"flex-end\" width=\"100px\">\n        <Skeleton height=\"24px\" width=\"48px\" />\n      </Flex>\n    )\n  }\n\n  if (!lowestPrice) {\n    return null\n  }\n\n  return <BNBAmountLabel justifyContent=\"flex-end\" amount={lowestPrice} width=\"100px\" />\n}\n\nconst PancakeBunniesTraits: React.FC<PancakeBunniesTraitsProps> = ({ collectionAddress }) => {\n  const [tokenApiResponse, setTokenApiResponse] = useState<ApiResponseCollectionTokens>(null)\n  const [raritySort, setRaritySort] = useState<SortType>('asc')\n  const { t } = useTranslation()\n  const { push } = useHistory()\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      const apiResponse = await getNftsFromCollectionApi(collectionAddress)\n      setTokenApiResponse(apiResponse)\n    }\n\n    fetchTokens()\n  }, [collectionAddress, setTokenApiResponse])\n\n  const totalMinted = tokenApiResponse ? sum(Object.values(tokenApiResponse.attributesDistribution)) : 0\n\n  const sortedBunnieKeys = useMemo(() => {\n    if (!tokenApiResponse) return []\n\n    return Object.keys(tokenApiResponse.data).sort(sortBunniesByRarityBuilder({ raritySort, data: tokenApiResponse }))\n  }, [raritySort, tokenApiResponse])\n\n  const toggleRaritySort = () => {\n    setRaritySort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  return (\n    <>\n      {tokenApiResponse ? (\n        <CollapsibleCard title={t('Bunny Id')}>\n          <TableWrapper>\n            <Table>\n              <thead>\n                <tr>\n                  <Th textAlign=\"left\">{t('Name')}</Th>\n                  <Th>{t('Count')}</Th>\n                  <Th>\n                    <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                      <Flex alignItems=\"center\">\n                        {t('Rarity')}\n                        {raritySort === 'asc' ? <ArrowUpIcon color=\"secondary\" /> : <ArrowDownIcon color=\"secondary\" />}\n                      </Flex>\n                    </StyledSortButton>\n                  </Th>\n                  <Th textAlign=\"right\">{t('Lowest')}</Th>\n                </tr>\n              </thead>\n              <tbody>\n                {sortedBunnieKeys.map((bunnyId) => {\n                  const nft = tokenApiResponse.data[bunnyId]\n                  if (!nft) {\n                    // Some bunnies don't exist on testnet\n                    return null\n                  }\n                  const count: number = tokenApiResponse.attributesDistribution[bunnyId] ?? 0\n                  const percentage = (count / totalMinted) * 100\n                  const handleClick = () => {\n                    push(`${nftsBaseUrl}/collections/${collectionAddress}/${bunnyId}`)\n                  }\n\n                  return (\n                    <ClickableRow key={bunnyId} onClick={handleClick} title={t('Click to view NFT')}>\n                      <Td>\n                        <NftName thumbnailSrc={nft.image.thumbnail} name={nft.name} />\n                      </Td>\n                      <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                      <Td textAlign=\"center\">{`${formatNumber(percentage, 0, 2)}%`}</Td>\n                      <Td textAlign=\"right\" width=\"100px\">\n                        <LowestPriceCell bunnyId={bunnyId} />\n                      </Td>\n                    </ClickableRow>\n                  )\n                })}\n              </tbody>\n            </Table>\n          </TableWrapper>\n        </CollapsibleCard>\n      ) : (\n        <CollapsibleCard title={t('Loading...')}>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign=\"left\">{t('Name')}</Th>\n                <Th>{t('Count')}</Th>\n                <Th>{t('Rarity')}</Th>\n                <Th>{t('Lowest')}</Th>\n              </tr>\n            </thead>\n            <tbody>\n              {times(19).map((bunnyCnt) => (\n                <tr key={bunnyCnt}>\n                  <Td>\n                    <Flex alignItems=\"center\">\n                      <Skeleton height=\"48px\" width=\"48px\" mr=\"8px\" />\n                      <Skeleton width=\"100px\" />\n                    </Flex>\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </CollapsibleCard>\n      )}\n    </>\n  )\n}\n\nexport default PancakeBunniesTraits\n","import { ApiResponseCollectionTokens } from 'state/nftMarket/types'\n\ntype sortBuilder = {\n  data: ApiResponseCollectionTokens\n  raritySort: string\n}\n\nexport const sortBunniesByRarityBuilder =\n  ({ raritySort, data }: sortBuilder) =>\n  (bunnyIdA, bunnyIdB) => {\n    const bunnyCountA = data.attributesDistribution[bunnyIdA] ?? 0\n    const bunnyCountB = data.attributesDistribution[bunnyIdB] ?? 0\n\n    return raritySort === 'asc' ? bunnyCountA - bunnyCountB : bunnyCountB - bunnyCountA\n  }\n","import React, { useState } from 'react'\nimport times from 'lodash/times'\nimport capitalize from 'lodash/capitalize'\nimport sum from 'lodash/sum'\nimport orderBy from 'lodash/orderBy'\nimport { ArrowDownIcon, ArrowUpIcon, Flex, Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\nimport { formatNumber } from 'utils/formatBalance'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { SortType } from '../../types'\nimport { StyledSortButton, TableWrapper } from './styles'\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\n\ninterface CollectionTraitsProps {\n  collectionAddress: string\n}\n\nconst CollectionTraits: React.FC<CollectionTraitsProps> = ({ collectionAddress }) => {\n  const { data, isFetching } = useGetCollectionDistribution(collectionAddress)\n  const [raritySort, setRaritySort] = useState<Record<string, SortType>>({})\n  const { t } = useTranslation()\n\n  if (isFetching) {\n    return (\n      <CollapsibleCard title={t('Loading...')}>\n        <Table>\n          <thead>\n            <tr>\n              <Th textAlign=\"left\">{t('Name')}</Th>\n              <Th width=\"100px\">{t('Count')}</Th>\n              <Th width=\"160px\">{t('Rarity')}</Th>\n            </tr>\n          </thead>\n          <tbody>\n            {times(19).map((bunnyCnt) => (\n              <tr key={bunnyCnt}>\n                <Td>\n                  <Skeleton width=\"100px\" />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </CollapsibleCard>\n    )\n  }\n\n  return (\n    <>\n      {data &&\n        Object.keys(data).map((traitType, index) => {\n          const total = sum(Object.values(data[traitType]))\n\n          // Parse the distribution values into an array to make it easier to sort\n          const traitValues: { value: string; count: number; rarity: number }[] = Object.keys(data[traitType]).reduce(\n            (accum, traitValue) => {\n              const count = data[traitType][traitValue]\n              const rarity = (count / total) * 100\n\n              return [...accum, { value: traitValue, count, rarity }]\n            },\n            [],\n          )\n          const sortType = raritySort[traitType] || 'desc'\n\n          const toggleRaritySort = () => {\n            setRaritySort((prevRaritySort) => {\n              if (!prevRaritySort[traitType]) {\n                return {\n                  ...prevRaritySort,\n                  [traitType]: 'asc',\n                }\n              }\n\n              return {\n                ...prevRaritySort,\n                [traitType]: prevRaritySort[traitType] === 'asc' ? 'desc' : 'asc',\n              }\n            })\n          }\n\n          return (\n            <CollapsibleCard key={traitType} title={capitalize(traitType)} initialOpenState={index <= 1} mb=\"32px\">\n              <TableWrapper>\n                <Table>\n                  <thead>\n                    <tr>\n                      <Th textAlign=\"left\">{t('Name')}</Th>\n                      <Th width=\"100px\">{t('Count')}</Th>\n                      <Th width=\"160px\">\n                        <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                          <Flex alignItems=\"center\">\n                            {t('Rarity')}\n                            {raritySort[traitType] === 'asc' ? (\n                              <ArrowUpIcon color=\"secondary\" />\n                            ) : (\n                              <ArrowDownIcon color=\"secondary\" />\n                            )}\n                          </Flex>\n                        </StyledSortButton>\n                      </Th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {orderBy(traitValues, 'rarity', sortType).map(({ value, count, rarity }) => {\n                      return (\n                        <tr key={value}>\n                          <Td>{capitalize(value)}</Td>\n                          <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                          <Td textAlign=\"center\">{`${formatNumber(rarity, 0, 2)}%`}</Td>\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </Table>\n              </TableWrapper>\n            </CollapsibleCard>\n          )\n        })}\n    </>\n  )\n}\n\nexport default CollectionTraits\n","import React, { useEffect } from 'react'\nimport { useParams } from 'react-router'\nimport Container from 'components/Layout/Container'\nimport { useAppDispatch } from 'state'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { fetchCollection } from 'state/nftMarket/reducer'\nimport Header from '../Header'\nimport PancakeBunniesTraits from './PancakeBunniesTraits'\nimport { pancakeBunniesAddress } from '../../constants'\nimport CollectionTraits from './CollectionTraits'\n\nconst Traits = () => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const dispatch = useAppDispatch()\n  const collection = useGetCollection(collectionAddress)\n\n  useEffect(() => {\n    if (collectionAddress) {\n      dispatch(fetchCollection(collectionAddress))\n    }\n  }, [collectionAddress, dispatch])\n\n  return (\n    <>\n      <Header collection={collection} />\n      <Container py=\"40px\">\n        {collectionAddress === pancakeBunniesAddress ? (\n          <PancakeBunniesTraits collectionAddress={collectionAddress} />\n        ) : (\n          <CollectionTraits collectionAddress={collectionAddress} />\n        )}\n      </Container>\n    </>\n  )\n}\n\nexport default Traits\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n","import { useEffect, useState } from 'react'\nimport { getCollectionDistributionApi } from 'state/nftMarket/helpers'\nimport { ApiCollectionDistribution, ApiCollectionDistributionPB } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\ninterface State {\n  isFetching: boolean\n  data: ApiCollectionDistribution['data']\n}\n\nconst useGetCollectionDistribution = (collectionAddress: string) => {\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      setState((prevState) => ({ ...prevState, isFetching: true }))\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\n      setState({\n        isFetching: false,\n        data: apiResponse.data,\n      })\n    }\n\n    fetchTokens()\n  }, [collectionAddress, setState])\n\n  return state\n}\n\ninterface StatePB {\n  isFetching: boolean\n  data: ApiCollectionDistributionPB['data']\n}\n\nexport const useGetCollectionDistributionPB = () => {\n  const [state, setState] = useState<StatePB>({ isFetching: false, data: null })\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      setState((prevState) => ({ ...prevState, isFetching: true }))\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistributionPB>(pancakeBunniesAddress)\n      setState({\n        isFetching: false,\n        data: apiResponse.data,\n      })\n    }\n\n    fetchTokens()\n  }, [setState])\n\n  return state\n}\n\nexport default useGetCollectionDistribution\n","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n"],"sourceRoot":""}